"""Generated FastAPI application with AI-powered request handling."""

import logging
from typing import Dict, Any, List
from fastapi import FastAPI, HTTPException
from anthropic import AsyncAnthropic
from .database import DatabaseTool
from .models import *

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# Initialize FastAPI app
app = FastAPI(
    title="{{ openapi_spec.info.title }}",
    version="{{ openapi_spec.info.version }}"
)

# Initialize tools
db = DatabaseTool()
ai_client = AsyncAnthropic()

# Define database tool for AI
db_tool = {
    "name": "database_operation",
    "description": """
    Performs database operations. Available operations:
    - list_all: Get all records from a table
    - insert: Create a new record
    - get_by_id: Get a record by ID

    Available tables and schemas:
    {% for model in database_config.models %}
    {{ model.table }} table:
    {% for column in model.columns %}
    - {{ column.name }} ({{ column.type }}{% if column.primary_key %}, primary key{% endif %}{% if not column.nullable %}, required{% endif %})
    {% endfor %}
    {% endfor %}
    """,
    "input_schema": {
        "type": "object",
        "properties": {
            "operation": {
                "type": "string",
                "enum": ["list_all", "insert", "get_by_id"]
            },
            "table": {
                "type": "string",
                "enum": [{% for model in database_config.models %}"{{ model.table }}"{% if not loop.last %}, {% endif %}{% endfor %}]
            },
            "data": {
                "type": "object"
            }
        },
        "required": ["operation", "table"]
    }
}

{% for path, path_spec in openapi_spec.paths.items() %}
{% for method, operation in path_spec.items() %}
@app.{{ method }}("{{ path }}")
async def {{ operation.operationId }}({% if operation.requestBody %}request: {{ operation.requestBody.content['application/json'].schema.get('$ref', '').split('/')[-1] }}{% endif %}) -> Any:
    """{{ operation.summary }}"""
    messages = [
        {
            "role": "user",
            "content": {% if operation.requestBody %}f"Execute a '{{ operation.operationId }}' operation using the database_operation tool. Insert the following data into the {{ path.strip('/') }} table: {request.model_dump_json()}"{% else %}"Execute a '{{ operation.operationId }}' operation using the database_operation tool to list all {{ path.strip('/') }}"{% endif %}
        }
    ]

    response = await ai_client.messages.create(
        model="claude-3-sonnet-20240229",
        max_tokens=1024,
        temperature=0,
        messages=messages,
        tools=[db_tool]
    )

    # Process AI response and execute tools
    for content in response.content:
        if (hasattr(content, 'type') and
            content.type == 'tool_use' and
            content.name == "database_operation"):

            return await db.execute_operation(content.input)

    raise HTTPException(
        status_code=500,
        detail="AI did not return expected database operation"
    )

{% endfor %}
{% endfor %}
